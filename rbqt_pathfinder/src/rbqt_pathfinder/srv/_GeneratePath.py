"""autogenerated by genpy from rbqt_pathfinder/GeneratePathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GeneratePathRequest(genpy.Message):
  _md5sum = "edb2258c032277b1d3770145a3d8a29f"
  _type = "rbqt_pathfinder/GeneratePathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16  id
geometry_msgs/Pose  Arrivee
geometry_msgs/Pose  Depart
bool    utilisePositionOdometry

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['id','Arrivee','Depart','utilisePositionOdometry']
  _slot_types = ['int16','geometry_msgs/Pose','geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,Arrivee,Depart,utilisePositionOdometry

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GeneratePathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.Arrivee is None:
        self.Arrivee = geometry_msgs.msg.Pose()
      if self.Depart is None:
        self.Depart = geometry_msgs.msg.Pose()
      if self.utilisePositionOdometry is None:
        self.utilisePositionOdometry = False
    else:
      self.id = 0
      self.Arrivee = geometry_msgs.msg.Pose()
      self.Depart = geometry_msgs.msg.Pose()
      self.utilisePositionOdometry = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h14dB.pack(_x.id, _x.Arrivee.position.x, _x.Arrivee.position.y, _x.Arrivee.position.z, _x.Arrivee.orientation.x, _x.Arrivee.orientation.y, _x.Arrivee.orientation.z, _x.Arrivee.orientation.w, _x.Depart.position.x, _x.Depart.position.y, _x.Depart.position.z, _x.Depart.orientation.x, _x.Depart.orientation.y, _x.Depart.orientation.z, _x.Depart.orientation.w, _x.utilisePositionOdometry))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Arrivee is None:
        self.Arrivee = geometry_msgs.msg.Pose()
      if self.Depart is None:
        self.Depart = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 115
      (_x.id, _x.Arrivee.position.x, _x.Arrivee.position.y, _x.Arrivee.position.z, _x.Arrivee.orientation.x, _x.Arrivee.orientation.y, _x.Arrivee.orientation.z, _x.Arrivee.orientation.w, _x.Depart.position.x, _x.Depart.position.y, _x.Depart.position.z, _x.Depart.orientation.x, _x.Depart.orientation.y, _x.Depart.orientation.z, _x.Depart.orientation.w, _x.utilisePositionOdometry,) = _struct_h14dB.unpack(str[start:end])
      self.utilisePositionOdometry = bool(self.utilisePositionOdometry)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h14dB.pack(_x.id, _x.Arrivee.position.x, _x.Arrivee.position.y, _x.Arrivee.position.z, _x.Arrivee.orientation.x, _x.Arrivee.orientation.y, _x.Arrivee.orientation.z, _x.Arrivee.orientation.w, _x.Depart.position.x, _x.Depart.position.y, _x.Depart.position.z, _x.Depart.orientation.x, _x.Depart.orientation.y, _x.Depart.orientation.z, _x.Depart.orientation.w, _x.utilisePositionOdometry))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Arrivee is None:
        self.Arrivee = geometry_msgs.msg.Pose()
      if self.Depart is None:
        self.Depart = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 115
      (_x.id, _x.Arrivee.position.x, _x.Arrivee.position.y, _x.Arrivee.position.z, _x.Arrivee.orientation.x, _x.Arrivee.orientation.y, _x.Arrivee.orientation.z, _x.Arrivee.orientation.w, _x.Depart.position.x, _x.Depart.position.y, _x.Depart.position.z, _x.Depart.orientation.x, _x.Depart.orientation.y, _x.Depart.orientation.z, _x.Depart.orientation.w, _x.utilisePositionOdometry,) = _struct_h14dB.unpack(str[start:end])
      self.utilisePositionOdometry = bool(self.utilisePositionOdometry)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h14dB = struct.Struct("<h14dB")
"""autogenerated by genpy from rbqt_pathfinder/GeneratePathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GeneratePathResponse(genpy.Message):
  _md5sum = "a34a7c545fdef613738b1142b9a33144"
  _type = "rbqt_pathfinder/GeneratePathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool    requeteAcceptee

"""
  __slots__ = ['requeteAcceptee']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       requeteAcceptee

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GeneratePathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.requeteAcceptee is None:
        self.requeteAcceptee = False
    else:
      self.requeteAcceptee = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.requeteAcceptee))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.requeteAcceptee,) = _struct_B.unpack(str[start:end])
      self.requeteAcceptee = bool(self.requeteAcceptee)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.requeteAcceptee))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.requeteAcceptee,) = _struct_B.unpack(str[start:end])
      self.requeteAcceptee = bool(self.requeteAcceptee)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class GeneratePath(object):
  _type          = 'rbqt_pathfinder/GeneratePath'
  _md5sum = 'c87f6c6dcb2875066c4354235cdff733'
  _request_class  = GeneratePathRequest
  _response_class = GeneratePathResponse
