/* Auto-generated by genmsg_cpp for file /home/thomas/Documents/Robocup2014/RBQT_deplacement/rbqt_pathfinder/msg/AstarPath.msg */
#ifndef RBQT_PATHFINDER_MESSAGE_ASTARPATH_H
#define RBQT_PATHFINDER_MESSAGE_ASTARPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "nav_msgs/Path.h"

namespace rbqt_pathfinder
{
template <class ContainerAllocator>
struct AstarPath_ {
  typedef AstarPath_<ContainerAllocator> Type;

  AstarPath_()
  : id(0)
  , path()
  {
  }

  AstarPath_(const ContainerAllocator& _alloc)
  : id(0)
  , path(_alloc)
  {
  }

  typedef int16_t _id_type;
  int16_t id;

  typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
   ::nav_msgs::Path_<ContainerAllocator>  path;


  typedef boost::shared_ptr< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbqt_pathfinder::AstarPath_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AstarPath
typedef  ::rbqt_pathfinder::AstarPath_<std::allocator<void> > AstarPath;

typedef boost::shared_ptr< ::rbqt_pathfinder::AstarPath> AstarPathPtr;
typedef boost::shared_ptr< ::rbqt_pathfinder::AstarPath const> AstarPathConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rbqt_pathfinder::AstarPath_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rbqt_pathfinder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rbqt_pathfinder::AstarPath_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14ff3ce65e927005eea9f8e966ad807f";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarPath_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14ff3ce65e927005ULL;
  static const uint64_t static_value2 = 0xeea9f8e966ad807fULL;
};

template<class ContainerAllocator>
struct DataType< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rbqt_pathfinder/AstarPath";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarPath_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 id\n\
nav_msgs/Path path\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarPath_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AstarPath_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbqt_pathfinder::AstarPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rbqt_pathfinder::AstarPath_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "path: ";
s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RBQT_PATHFINDER_MESSAGE_ASTARPATH_H

