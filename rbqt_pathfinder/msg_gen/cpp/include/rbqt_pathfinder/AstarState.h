/* Auto-generated by genmsg_cpp for file /home/thomas/Documents/Robocup2014/RBQT_deplacement/rbqt_pathfinder/msg/AstarState.msg */
#ifndef RBQT_PATHFINDER_MESSAGE_ASTARSTATE_H
#define RBQT_PATHFINDER_MESSAGE_ASTARSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rbqt_pathfinder
{
template <class ContainerAllocator>
struct AstarState_ {
  typedef AstarState_<ContainerAllocator> Type;

  AstarState_()
  : id(0)
  , state(0)
  {
  }

  AstarState_(const ContainerAllocator& _alloc)
  : id(0)
  , state(0)
  {
  }

  typedef int16_t _id_type;
  int16_t id;

  typedef uint8_t _state_type;
  uint8_t state;

  enum { EN_COURS = 0 };
  enum { LIBRE = 1 };
  enum { SUCCES = 2 };
  enum { ECHEC = 3 };

  typedef boost::shared_ptr< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbqt_pathfinder::AstarState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AstarState
typedef  ::rbqt_pathfinder::AstarState_<std::allocator<void> > AstarState;

typedef boost::shared_ptr< ::rbqt_pathfinder::AstarState> AstarStatePtr;
typedef boost::shared_ptr< ::rbqt_pathfinder::AstarState const> AstarStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rbqt_pathfinder::AstarState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rbqt_pathfinder::AstarState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rbqt_pathfinder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rbqt_pathfinder::AstarState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6c8af539274ee760816fa034d4811aac";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6c8af539274ee760ULL;
  static const uint64_t static_value2 = 0x816fa034d4811aacULL;
};

template<class ContainerAllocator>
struct DataType< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rbqt_pathfinder/AstarState";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 EN_COURS = 0  \n\
uint8 LIBRE    = 1  # Il faut attendre l'etat LIBRE, SUCCES ou ECHEC avant de redemander un chemin\n\
uint8 SUCCES  = 2 \n\
uint8 ECHEC  = 3\n\
\n\
int16 id\n\
uint8 state\n\
\n\
";
  }

  static const char* value(const  ::rbqt_pathfinder::AstarState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rbqt_pathfinder::AstarState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rbqt_pathfinder::AstarState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AstarState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbqt_pathfinder::AstarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rbqt_pathfinder::AstarState_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RBQT_PATHFINDER_MESSAGE_ASTARSTATE_H

